#include <stdio.h>
#include <stdlib.h>
#include <my-ipc.h>
#include <client-side.h>
#include <redundant.h>
#include <public.h>

const char myName[] = "ex5";
const char deployment[] = "Bc0c1c2c3 Ca3a4a5 Cf1g1h1 Di3i4 De4e5 De7e8 Sc5 Sc7 Sg5 Sg7 ";

enum ship {
  UNKNOWN,
  ROCK,
  NOSHIP,
  BSHIP,
  CSHIP,
  DSHIP,
  SSHIP
};

int cur_x,cur_y;
enum ship enemy_board[BD_SIZE][BD_SIZE];    // BD_SIZE is 9 (defined in public.h)

void respond_with_name(void)
{
  char *str = (char *)malloc(sizeof(myName));
  strcpy(str, myName);
  send_to_ref(str);
  free(str);
}

void respond_with_deployment(void)
{
  char *str = (char *)malloc(sizeof(deployment));
  strcpy(str, deployment);
  send_to_ref(str);
  free(str);
}

int is_rock(int x, int y){
  if ((x==0&&(y==0||y==1||y==7||y==8))||(x==1&&(y==0||y==8))||(x==7&&(y==0||y==8))||(x==8&&(y==0||y==1||y==7||y==8))) return 1;
  else return 0;
}

void init_board(void)
{
  //======kokokara======
	int i,j;
	for (i=0;i<10;i++){
		for (j=0;j<10;j++){
			if (is_rock(i,j) == 0){
				enemy_board[i][j] = UNKNOWN;	
			}
			else if(is_rock(i,j)==1){
				enemy_board[i][j] = ROCK;			
			}	
		}
	}

  //======kokomade======
}

void respond_with_shot(void)
{
  char shot_string[MSG_LEN];
  int x, y;
  
  while (TRUE)
  {
    x = rand() % BD_SIZE;
    y = rand() % BD_SIZE;
    //=====kokokara=====
		if (enemy_board[x][y] == UNKNOWN){
			break;
		}

  }  //=====kokomade=====
  
  printf("[%s] shooting at %d%d ... ", myName, x, y);
  sprintf(shot_string, "%d%d", x, y);
  send_to_ref(shot_string);
  cur_x = x;
  cur_y = y;
}

void record_result(int x,int y,char line[])
{
	printf("\n\n\n\n");
  if(line[13]=='B')
  {
    //====kokokara====
		enemy_board[x][y] = BSHIP;

    //====kokomade====
  }
  else if(line[13]=='C')
  {
    //====kokokara====
		enemy_board[x][y] = CSHIP;


    //====kokomade====
  }
  else if(line[13]=='D')
  {
    //====kokokara====
		enemy_board[x][y] = DSHIP;


    //====kokomade====
  }
  else if(line[13]=='S')
  {
    //====kokokara====
		enemy_board[x][y] = SSHIP;
		if (x+1<10){
			enemy_board[x+1][y] = NOSHIP;
			if (y+1<10) enemy_board[x+1][y+1] = NOSHIP;
			if (y-1>=0) enemy_board[x+1][y-1] = NOSHIP;
		}
		if (x-1>=0){
			enemy_board[x-1][y] = NOSHIP;
			if (y+1 < 10) enemy_board[x-1][y+1] = NOSHIP;
			if (y-1 >= 0) enemy_board[x-1][y-1] = NOSHIP;
		}
		if (y+1<10) enemy_board[x][y+1] = NOSHIP;
		if (y-1>=0) enemy_board[x][y-1] = NOSHIP;


    //====kokomade====
  }
  else if(line[13]=='R')
  {
    //====kokokara====
		enemy_board[x][y] = ROCK;


    //====kokomade====
  }
  else
  {
    //====kokokara====
		enemy_board[x][y] = NOSHIP;


    //====kokomade====
  }
}

void print_board(void){
  int ix, iy;

  for (iy = BD_SIZE - 1; iy >= 0; iy--)
  {
    printf("%2d ", iy);
    for (ix = 0; ix < BD_SIZE; ix++)
    {
      switch(enemy_board[ix][iy])
      {
        case UNKNOWN:
          printf("U ");
          break;
        case NOSHIP:
          printf("N ");
          break;
        case ROCK:
          printf("R ");
          break;
        case BSHIP:
          printf("B ");
          break;
        case CSHIP:
          printf("C ");
          break;
        case DSHIP:
          printf("D ");
          break;
        case SSHIP:
          printf("S ");
          break;
        default:
          break;
      }
    }
    printf("\n");
  }

  printf("  ");
  for (ix = 0; ix < BD_SIZE; ix++)
  {
    printf("%2d", ix);
  }
  printf("\n\n");
}

void handle_messages(void)
{
  char line[MSG_LEN];

  srand(getpid());
  init_board();
  
  while (TRUE)
  {
    receive_from_ref(line);

    if(message_has_type(line, "name?"))
    {
      respond_with_name(); 
    }
    else if(message_has_type(line, "deployment?"))
    {
       respond_with_deployment(); 
    }
    else if(message_has_type(line, "shot?"))
    {
      respond_with_shot(); 
    }
    else if(message_has_type(line, "shot-result:"))
    {
      record_result(cur_x,cur_y,line);
      printf("[%s] result: %c\n", myName, line[13]);
      print_board();
    }
    else if(message_has_type(line, "end:"))
    {
      break;
    }
    else
    {
      printf("[%s] ignoring message: %s", myName, line);
    }
  }
}

int main()
{
  client_make_connection();
  handle_messages();
  client_close_connection();
  return 0;
}
